id. Response ID,submitdate. Date submitted,lastpage. Last page,startlanguage. Start language,seed. Seed,Introduction. Ready?,IntroductionB. Ready?,A000. Enter the password to continue (Ask US after Playing with the debugger for 15 minutes),BugA10. Bug 1:     This first bug has to do with how the Fibonacci is defined here. This Fibonacci function uses n+1 and n+2 what leads to a diverging function as the base case is never reached. The solution is to replace n+1 by n-1 and n+2 by n-2.       Did you find the bug?    ,BugA11[SQ001]. How difficult was it to find the bug? [Debugger],BugA12. Did you find the bug using the debugger? (Otherwise please specify),BugA12[other]. Did you find the bug using the debugger? (Otherwise please specify) [Other],BugA13[SQ001]. Did the debugger help in finding the bug? [Debugger],"BugA20. Bug 2:     The second bug can be found in the matrix multiply function (tasks/matrix.cpp). Here the sum variable is cleared only every row iteration, while it should be cleared every column as well. The solution is to move the int sum =0 to within the (j &lt; 6) while loop.       Did you find the bug?    ",BugA21[SQ001]. How difficult was it to find the bug? [Debugger],BugA22. Did you find the bug using the debugger? (Otherwise please specify),BugA22[other]. Did you find the bug using the debugger? (Otherwise please specify) [Other],BugA23[SQ001]. Did the debugger help in finding the bug? [Debugger],"BugA30. Bug 3:     The last bug is a famous intermittent bug. The UART peripheral is only initialized after the restoration of the memory after a power failure. This means whenever a power failure occurs and case 2 or 3 is true, this UART initialization is skipped. One can solve this by moving the UART setup to someplace before the switch-case.       Did you find the bug?    ",BugA31[SQ001]. How difficult was it to find the bug? [Debugger],BugA32. Did you find the bug using the debugger? (Otherwise please specify),BugA32[other]. Did you find the bug using the debugger? (Otherwise please specify) [Other],BugA33[SQ001]. Did the debugger help in finding the bug? [Debugger],B000. Enter the password to continue (Ask US after Playing with the debugger for 15 minutes),"BugB10. Bug 1:  The snippet shows the first bug of the WISP system. The blink_COUNTER variable is misspelt, this creates an infinite loop as blink_C0UNTER is never updated. The solution is to replace the 0 with O.       Did you find the bug?    ",BugB11[SQ001]. How difficult was it to find the bug? [Debugger],BugB12. Did you find the bug using the debugger? (Otherwise please specify),BugB12[other]. Did you find the bug using the debugger? (Otherwise please specify) [Other],BugB13[SQ001]. Did the debugger help in finding the bug? [Debugger],"BugB20. Bug 2:  The second bug has to do with the result variable, which is never pointed to any memory. This can be solved by allocating the memory using malloc or by initializing the array at the beginning.       Did you find the bug?    ",BugB21[SQ001]. How difficult was it to find the bug? [Debugger],BugB22. Did you find the bug using the debugger? (Otherwise please specify),BugB22[other]. Did you find the bug using the debugger? (Otherwise please specify) [Other],BugB23[SQ001]. Did the debugger help in finding the bug? [Debugger],"BugB30. Bug 3:  The snippet shows bug 3. The initialization of the ADC (setup_adc()) happens after the restoration, although, if restoring after a power failure case 2 or 3 is true, the setup is not executed. This is a very common mistake in Intermittent Computing Systems. The solution is to move the setup_adc() function above the restoration (switch case)       Did you find the bug?    ",BugB31[SQ001]. How difficult was it to find the bug? [Debugger],BugB32. Did you find the bug using the debugger? (Otherwise please specify),BugB32[other]. Did you find the bug using the debugger? (Otherwise please specify) [Other],BugB33[SQ001]. Did the debugger help in finding the bug? [Debugger],C1[SQ001]. If you would work on the code for battery-free device: would you use this debugger system? [System A],C1[SQ002]. If you would work on the code for battery-free device: would you use this debugger system? [System B],C2[SQ001]. Was the debugging experience with each debugging system close to the one you have? [System A],C2[SQ002]. Was the debugging experience with each debugging system close to the one you have? [System B],C3[SQ001]. How intuitive to use was each of the debugging systems? [System A],C3[SQ002]. How intuitive to use was each of the debugging systems? [System B],C4[SQ001]. How easy to use was each of the debugging systems? [System A],C4[SQ002]. How easy to use was each of the debugging systems? [System B],C5. What are the positive aspects about System B?,C6. What are the negative aspects about System B?,C7. What are the positive aspects about System A?,C8. What are the negative aspects about System A?,A12. What is your age?,A1. You are:,A2. With which programming language you are most comfortable with?,A2[other]. With which programming language you are most comfortable with? [Other],A3. Have you ever used an Integrated Development Environment (IDE) when developing your applications?,A4. Do you prefer to develop your applications using an Integrated Development Environment (IDE)?,A5[SQ001]. How do you assess your embedded systems programming skills? [Expertise],A6. Have you ever used hardware-based debuggers for your embedded project (such as Seggers J-link - see photo below)?   ,"A7. Have you ever used debugging techniques such as breakpoints, watchpoints, memory views, peripheral views, etc. while debugging an embedded system?",A8[SQ001]. What are your most used debugging techniques? [Breakpoints/Watchpoints],A8[SQ002]. What are your most used debugging techniques? [printf()],A8[SQ003]. What are your most used debugging techniques? [Single stepping],A8[SQ004]. What are your most used debugging techniques? [Memory inspection],A8[other]. What are your most used debugging techniques? [Other],A9. Have you heard about battery-free intermittently-powered systems before the start of this study?,A10. Have you ever programmed battery-free/intermittently-powered systems?,A11[SQ001]. According to you: how difficult is the application development for battery-free intermittently-powered systems? [Writing code for Battery-free systems],interviewtime. Total time,groupTime117. Group time: Crash course on intermittently-powered battery-free embedded systems,IntroductionTime. Question time: Introduction,groupTime118. Group time: Note on the Intermittent Power Supply ,IntroductionBTime. Question time: IntroductionB,groupTime108. Group time: System A Bug Hunt,A000Time. Question time: A000,BugA10Time. Question time: BugA10,BugA11Time. Question time: BugA11,BugA12Time. Question time: BugA12,BugA13Time. Question time: BugA13,BugA20Time. Question time: BugA20,BugA21Time. Question time: BugA21,BugA22Time. Question time: BugA22,BugA23Time. Question time: BugA23,BugA30Time. Question time: BugA30,BugA31Time. Question time: BugA31,BugA32Time. Question time: BugA32,BugA33Time. Question time: BugA33,groupTime111. Group time: System B Bug Hunt,B000Time. Question time: B000,BugB10Time. Question time: BugB10,BugB11Time. Question time: BugB11,BugB12Time. Question time: BugB12,BugB13Time. Question time: BugB13,BugB20Time. Question time: BugB20,BugB21Time. Question time: BugB21,BugB22Time. Question time: BugB22,BugB23Time. Question time: BugB23,BugB30Time. Question time: BugB30,BugB31Time. Question time: BugB31,BugB32Time. Question time: BugB32,BugB33Time. Question time: BugB33,groupTime114. Group time: Debugger Systems Assessment,C1Time. Question time: C1,C2Time. Question time: C2,C3Time. Question time: C3,C4Time. Question time: C4,C5Time. Question time: C5,C6Time. Question time: C6,C7Time. Question time: C7,C8Time. Question time: C8,groupTime107. Group time: Personal Information,A12Time. Question time: A12,A1Time. Question time: A1,A2Time. Question time: A2,A3Time. Question time: A3,A4Time. Question time: A4,A5Time. Question time: A5,A6Time. Question time: A6,A7Time. Question time: A7,A8Time. Question time: A8,A9Time. Question time: A9,A10Time. Question time: A10,A11Time. Question time: A11
4,1980-01-01 00:00:00,6,en,1653865737,Yes,Yes,apple,No,,,,,No,,,,,No,,,,,pear,No,,,,,No,,,,,No,,,,,Yes,No,Similar to what I am used to,Different from what I am used to,Intuitive,Non-intuitive,Neither easy nor difficult,Neither easy nor difficult,I think this system might be to the liking of those who prefer terminal over GUI.,Not very intuitive and probably unlike what most users are used to.,Very similar to most debuggers. People will have an easier time learning how to use this one.,Can't think of any.,23,Female,Python,,Yes,Yes,Some experience,No,Yes,Yes,Yes,Yes,No,,Yes,No,Somewhat difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
5,1980-01-01 00:00:00,6,en,219549667,Yes,Yes,apple,No,,,,,No,,,,,No,,,,,pear,No,,,,,No,,,,,No,,,,,No,Yes,Similar to what I am used to,Similar to what I am used to,Intuitive,Non-intuitive,Somewhat difficult,Somewhat difficult,"It allows you to set breakpoints in the code. Also, the terminal debugger may allow for automated scripts, and result reporting.",Having to reflash after setting a new breakpoint in the code.,"Being able to use the GUI debugging buttons (step over, step out, etc.) which is what I'm used to.","The program got a segmentation fault at the start, and the debugger output could not point me in the right direction.",24,Male,C/C++,,Yes,Yes,Little experience,Yes,Yes,Yes,No,No,No,,Yes,No,Similiar to battery-powered embedded systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6,1980-01-01 00:00:00,6,en,1705827728,Yes,Yes,apple,Yes,Neither easy nor difficult,Yes,,Yes,No,,,,,No,,,,,pear,No,,,,,No,,,,,No,,,,,Yes,Yes,Different from what I am used to,Different from what I am used to,Intuitive,Non-intuitive,Neither easy nor difficult,Neither easy nor difficult,terminal driven (less switching once learning it),terminal driven (steep learning curve),tightly integrated to IDE,switching between tabs for building/loading,34,Male,Python,,Yes,Yes,A lot of experience,Yes,Yes,Yes,Yes,Yes,Yes,,No,No,Somewhat difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
7,1980-01-01 00:00:00,6,en,15004810,Yes,Yes,apple,Yes,Neither easy nor difficult,Yes,,Some What,No,,,,,No,,,,,pear,No,,,,,No,,,,,No,,,,,Yes,Yes,Similar to what I am used to,Different from what I am used to,Neither intuitive nor non-intuitive,Non-intuitive,Easy,Somewhat difficult,It shows the voltage stored in the capacitor if you're careful with the temporary stored energy such that it has not too little or too much voltage.,"I was struggling with errors that occur when using debug commands, therefore rendering me to be unable to even start finding the bugs.",It was easy and intuitive to work with.,The green restart button doesn't seem to function correctly. Had to go through some pop-up windows.,23,Male,C/C++,,Yes,Yes,A lot of experience,Yes,Yes,Yes,Yes,Yes,No,Measuring the voltage,No,No,Somewhat difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8,1980-01-01 00:00:00,6,en,1264031530,Yes,Yes,apple,Yes,Neither easy nor difficult,Yes,,Yes,No,,,,,No,,,,,pear,No,,,,,No,,,,,No,,,,,Yes,No,Similar to what I am used to,Similar to what I am used to,Absolutely intuitive,Absolutely intuitive,Easy,Somewhat difficult,programmer friendly ,need proper documentation before we can work on it. ,Easy to use. similar to other debuggers,none,26,Male,Python,,Yes,Yes,Some experience,Yes,Yes,Yes,Yes,No,Yes,,Yes,No,Similiar to battery-powered embedded systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
9,1980-01-01 00:00:00,6,en,1750218359,Yes,Yes,apple,Yes,Easy,Yes,,Yes,No,,,,,No,,,,,pear,No,,,,,No,,,,,No,,,,,Yes,No,Similar to what I am used to,Similar to what I am used to,Intuitive,Non-intuitive,Easy,Somewhat difficult,"I am used to GDB debugger for C/C++ debugging, so it was bit similiar to that.","Adding breakpoints in the code and compiling again is cumbersome to do everytime.
'wait, int, break' commands is not so initutive.","Compiling once is enough to debug in the hardware. Reflashing is not required.
Breakpoints and continuing into the code is more of GUI based and intuituve than browsing through the code.","Had a bit of learning or getting used time, but once got a hang of it, it was slick and easy.",27,Male,C/C++,,Yes,Yes,A lot of experience,No,Yes,Yes,Yes,No,Yes,,Yes,No,Somewhat difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
10,1980-01-01 00:00:00,6,en,1441815904,Yes,Yes,apple,Yes,Neither easy nor difficult,Yes,,Yes,No,,,,,No,,,,,pear,No,,,,,No,,,,,No,,,,,No,No,Very different from what I am used to,Different from what I am used to,Intuitive,Non-intuitive,Somewhat difficult,Very difficult,"None, I still have no clue what it is.","Debugger does not work as described.
No resolving of symbols.",Nice to set breakpoints in editor.,Still don't understand how to use it.,44,Male,C/C++,,Yes,No,A lot of experience,Yes,Yes,No,Yes,No,No,,Yes,No,Somewhat difficult,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
